package testDb;

import testDb.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "PERSON".
 */
public class Person {

    private Long id;
    private long id_person;
    private String person_name;
    private String person_last_name;
    private long id_profession;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PersonDao myDao;

    private Profession profession;
    private Long profession__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Person() {
    }

    public Person(Long id) {
        this.id = id;
    }

    public Person(Long id, long id_person, String person_name, String person_last_name, long id_profession) {
        this.id = id;
        this.id_person = id_person;
        this.person_name = person_name;
        this.person_last_name = person_last_name;
        this.id_profession = id_profession;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPersonDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getId_person() {
        return id_person;
    }

    public void setId_person(long id_person) {
        this.id_person = id_person;
    }

    public String getPerson_name() {
        return person_name;
    }

    public void setPerson_name(String person_name) {
        this.person_name = person_name;
    }

    public String getPerson_last_name() {
        return person_last_name;
    }

    public void setPerson_last_name(String person_last_name) {
        this.person_last_name = person_last_name;
    }

    public long getId_profession() {
        return id_profession;
    }

    public void setId_profession(long id_profession) {
        this.id_profession = id_profession;
    }

    /** To-one relationship, resolved on first access. */
    public Profession getProfession() {
        long __key = this.id_profession;
        if (profession__resolvedKey == null || !profession__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProfessionDao targetDao = daoSession.getProfessionDao();
            Profession professionNew = targetDao.load(__key);
            synchronized (this) {
                profession = professionNew;
            	profession__resolvedKey = __key;
            }
        }
        return profession;
    }

    public void setProfession(Profession profession) {
        if (profession == null) {
            throw new DaoException("To-one property 'id_profession' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.profession = profession;
            id_profession = profession.getId();
            profession__resolvedKey = id_profession;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
